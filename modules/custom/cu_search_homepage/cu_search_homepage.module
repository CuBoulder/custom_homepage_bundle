<?php

/**
 * @file
 * cu_search_homepage feature. Includes contexts, variables (via strongarm).
 * a box, permissions, and custom code and functionality.
 */

include_once('cu_search_homepage.features.inc');

/**
 * Implements hook_init().
 *
 * Legacy search will go to /gsearch/all/redirect?[...]
 * Following code looks for 'a=' for search query
 */
function cu_search_homepage_init() {
  if (arg(2) == 'redirect' && arg(0) == 'gsearch') {
    $goto = rawurlencode($_GET['a']);
    drupal_goto('gsearch/all/' . $goto);
  }
}

/**
 * Implements hook_menu().
 */
function cu_search_homepage_menu() {
  $items['gsuggest'] = array(
    'title' => 'GSA Autocomplete',
    'page callback' => 'cu_search_homepage_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['whitepages/ldapdrill.xml'] = array(
    'title' => 'Whitepages redirect',
    'page callback' => 'cu_search_homepage_whitepages_redirect',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['whitepages/ldapnew.xml'] = array(
    'title' => 'Whitepages redirect',
    'page callback' => 'cu_search_homepage_whitepages_redirect',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Page callback for whitepages/ldapdrill.xml
 */
function cu_search_homepage_whitepages_redirect() {
  if (isset($_GET['cnfull'])) {
    drupal_goto('gsearch/people/' . $_GET['cnfull']);
  }
  elseif (isset($_POST['cnfull'])) {
    drupal_goto('gsearch/people/' . $_POST['cnfull']);
  }
  else {
    drupal_goto('gsearch/people');
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Takes over gsearch from the google appliance module.
 */
function cu_search_homepage_menu_alter(&$items) {
  $items['gsearch'] = array(
    'title' => t('Search CU Boulder'),
    'page callback' => 'cu_search_homepage_search_view',
    'page arguments' => array(1, 2, 3), // Scope (all, fac, people...), Search Keys, Sort
    'access arguments' => array('view_cu_search_homepage_results'),
  );
}

/**
 * Implements hook_permission().
 */
function cu_search_homepage_permission() {
  return array(
    'view_cu_search_homepage_results' => array(
      'title' => 'View search results',
      'description' => 'View search results on search/*',
    ),
  );
}

/**
 * Page callback for search/*
 *
 * For now, simply a wrapper around the appliance's search results.
 */
function cu_search_homepage_search_view($scope = 'all', $keys, $sort = NULL) {
  $content = array();
  return $content;
}

/**
 * Implements hook_block_info().
 */
function cu_search_homepage_block_info() {
  $blocks['cu_search_homepage_search'] = array(
    'info' => t('Search Sites + People'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['cu_search_homepage_search_full'] = array(
    'info' => t('Search Sites + People Full'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['cu_search_homepage_ga_results'] = array(
    'info' => t('Google Appliance Search Results'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['cu_search_homepage_ga_related'] = array(
    'info' => t('Google Appliance Related Searches'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_search_block_view().
 */
function cu_search_homepage_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 'cu_search_homepage_search':
      $block['content'] = drupal_get_form('cu_search_homepage_search_form_small');
      $block['subject'] = t('Search');
      break;
    case 'cu_search_homepage_search_full':
      $block['content'] = drupal_get_form('cu_search_homepage_search_form_full');
      $block['subject'] = t('Search');
      $block['title'] = '<none>';
      break;
    case 'cu_search_homepage_ga_results':
      $block['content'] = cu_search_homepage_ga_results_view();
      $block['subject'] = t('Website Search Results');
      $block['title'] = '<none>';
      break;
    case 'cu_search_homepage_ga_related':
      $block['content'] = cu_search_homepage_ga_related_view();
      $block['subject'] = t('Narrow search:');
      break;
  }
  return $block;
}

/**
 * Wrapper around _cu_search_homepage_search_form() for small form.
 */
function cu_search_homepage_search_form_small($form, &$form_state) {
  $form = _cu_search_homepage_search_form('small');
  return $form;
}

/**
 * Wrapper around _cu_search_homepage_search_form for full form.
 */
function cu_search_homepage_search_form_full($form, &$form_state) {
  $form = _cu_search_homepage_search_form('full');
  return $form;
}

/*
 * Implements hook_form_FORM_ID_alter
 */

function cu_search_homepage_form_google_appliance_block_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][0] = '_cu_search_homepage_search_form_submit';
}

/**
 * Search form.
 */
function _cu_search_homepage_search_form($display = 'small') {
  $form = array();

  // Setup default keys from arg(1).
  $default_keys = arg(0) == 'gsearch' ? urldecode(check_plain(arg(2))) : '';

  // If on search page with no keys, show title, otherwise hide.
  $title_display = (arg(0) == 'gsearch' && !arg(2)) ? 'before' : 'invisible';
  $form['search_keys'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter the terms you wish to search for.'),
    '#title_display' =>  $title_display,
    '#size' => 15,
    '#default_value' => $default_keys,
    '#autocomplete_path' => 'suggest',
    '#attributes' => array(
      'class' => array('auto_submit'),
    ),
  );

  $default_scope = urlencode(arg(1));
  if ($display == 'full') {
    $form['search_scope'] = array(
      '#type' => 'select',
      '#options' => array('all' => 'All (websites)', 'people' => 'All People', 'facstaff' => 'Faculty/Staff', 'students' => 'Students',),
      '#default_value' => $default_scope,
    );
  }
  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Search'),
    ),
  );

  $form['#submit'][] = '_cu_search_homepage_search_form_submit';
  return $form;
}

/**
 * Submit handler for cu_search_homepage_search_form (small and full).
 *
 * Simply sets the form redirect to search/KEYS.
 */
function _cu_search_homepage_search_form_submit($form, &$form_state) {
  // Kill any dynamic destinations.
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  // Set the redirect.
  $search_scope = !empty($form_state['values']['search_scope']) ? urlencode($form_state['values']['search_scope']) : 'all';

  //If someone submits the search box without changing the default text, then we don't want the database to be searched, we just want them to hit the blank search page. This ternary if should handle that case.
  $search_query = $form_state['values']['search_keys']==trim("Search Sites + People") ? NULL : urlencode($form_state['values']['search_keys']);
  $form_state['redirect'] = url('gsearch/' . $search_scope . '/' . $search_query, array('absolute' => TRUE));
}

/**
 * Block callback for ga results.
 */
function cu_search_homepage_ga_results_view() {
  $content = array();
  $keys = urldecode(arg(2));
  $sort = urldecode(arg(3));
  $content['results']['#markup'] = google_appliance_search_view($keys, $sort);
  return $content;
}

/**
 * Block callback for related searches.
 */
function cu_search_homepage_ga_related_view() {
  $content = array();

  // grab module settings
  $settings = _google_appliance_get_settings();

  // get the search qeury
  $search_query = urldecode( arg(2) );
  $cluster_content = NULL;

  // perform POST to acquire the clusters  block
  $clusterQueryURL = check_plain($settings['hostname'] . '/cluster');
  $clusterQueryParams = array(
    'q' => check_plain($search_query),
    'btnG' => 'Google+Search',
    'access' => 'p',
    'entqr' => '0',
    'ud' => '1',
    'sort' => 'date:D:L:d1',
    'output' => 'xml_no_dtd',
    'oe' => 'utf8',
    'ie' => 'utf8',
    'site' => check_plain($settings['collection']),
    'client' => check_plain($settings['frontend']),
  );

  // cURL request for the clusters produces JSON result
  $gsa_clusters_json = _curl_post($clusterQueryURL, $clusterQueryParams);

  if (!$gsa_clusters_json['is_error']) { // no error -> get the clusters

    $clusters = json_decode($gsa_clusters_json['response'], TRUE);

    if (isset($clusters['clusters'][0])) {

      // build the link list
      $cluster_list_items = array();
      foreach ($clusters['clusters'][0]['clusters'] as $cluster) {
        array_push($cluster_list_items, l($cluster['label'], 'gsearch/all/' . $cluster['label']));
      }

      // create theme-friendly list of links
      $cluster_list = array(
        'items' => $cluster_list_items,
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array(),
      );
      $cluster_content = theme('item_list', $cluster_list);
    }
  }
  if (!empty($cluster_content)) {
    $content['related']['#markup'] = $cluster_content;
  }
  return $content;
}

/**
 * Implements hook_preprocess_google_appliance_results().
 *
 * This gets called by google_appliance_search_view() to format results' output.
 */
function cu_search_homepage_preprocess_google_appliance_results(&$vars) {
  // Unset the appliances' default search form. We'll have our own as a block.
  unset($vars['search_form']);
  // Unset synonyms to prevent 'You might also' text.
  unset($vars['show_synonyms']);
}

/**
 * Implements hook_preprocess_google_appliance_sort_headers().
 *
 * Copied directly from googe_appliance module, ony changed path to gsearch/all.
 */
function cu_search_homepage_preprocess_google_appliance_sort_headers(&$vars) {

  // Possible sort options.
  $vars['sort_options'] = array(
    array(  // default sort
      'sort' => 'rel',
      'label' => t('Relevance'),
      'gsa_key' => '',
    ),
    array(
      'sort' => 'date',
      'label' => t('Date'),
      'gsa_key' => 'date:D:S:d1'
    ),
    /*
    array(
     'sort' => 'date_asc',
     'label' => t('Oldest First'),
     'gsa_key' => 'date:A:S:d1',
    ),
    */
  );

  // Figure out which page we are on.
  $cur_page = 0;
  if (isset($_GET['page']) ) {
    $cur_page = check_plain($_GET['page']);
  }

  $vars['sorters'] = array();
  $sort_idx = 0;
  $sort_found = FALSE;
  foreach ($vars['sort_options'] as $sort_opt ) {

    // If we haven't yet found the current sort, look for params again.
    $sort_is_current = FALSE;
    $sort_param = $vars['gsa_query_params']['sort'];
    // Was a sort requested in the query?
    if ((!$sort_found) && ($sort_param != '')) {

      // Is the sort param one of the valid ones?
      if (($sort_param == $sort_opt['gsa_key'])) {
        $sort_is_current = TRUE;
        $sort_found = TRUE;
      }
    }
    elseif ((!$sort_found) && ($sort_param == '')) {
      // We had no sort parameters.
      if ($sort_opt['sort'] == 'rel') {
        // And we are looking at the default sort.
        $sort_is_current = TRUE;
        $sort_found = TRUE;
      }
    }

    // If we are on the current sort, then we just create non-linked text
    // for the sort label.
    $sorter_display_content = '';
    if ($sort_is_current) {
      $vars['sorters'][$sort_idx]['display'] = '<span class="active-sort">' . $sort_opt['label'] . '</span>';
    }
    else {
      // We're not on the current sort, so create a link.
      $link_attributes = array();
      $link_attributes['query'] = array(
          'page' => $cur_page,
          );

      // Append the query to the base url of the serach page.
      $link_path = 'gsearch/all/' . $vars['gsa_query_params']['q'];

      // Append the sort param if any.
      $link_path .= '/' . $sort_opt['sort'];

      $vars['sorters'][$sort_idx]['display'] = l($sort_opt['label'], $link_path, $link_attributes);
    }
    $sort_idx++;
  }
}


/**
 * Autocomplete callback function for CU Search boxes
 */
function cu_search_homepage_autocomplete($string = '') {
  $string = urlencode($string);
  $data = drupal_http_request("http://gsa.colorado.edu/suggest?site=default_collection&client=default_frontend&access=p&format=rich&q=$string");
  $json=json_decode($data->data,true);
  $outp = array();
  foreach($json["results"] as $term) {
    $outp[(string) $term['name']] = (string) $term['name'];
  }

  drupal_json_output($outp);
}
